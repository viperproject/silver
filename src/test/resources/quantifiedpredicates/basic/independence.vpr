// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Int

predicate p1(a:Ref) {
	acc(a.f)
}

predicate p2(a:Ref, b:Int) {
	acc(a.g)
}

//independent field
method m1(r:Ref)
{
	var c:Int := 2
	inhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	assert(c == 2)
	exhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	assert (c == 2)
}

//independent predicates
//same predicate, different fix parameter
method m2(r:Ref, r2:Ref, i:Int)
requires r!= r2
requires acc(p2(r2, i))
ensures acc(p2(r2, i))
{
	inhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	unfold p2(r2, i)
	fold p2(r2, i)
	exhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	unfold p2(r2, i)
	fold p2(r2, i)
}

//same predicate, same fix parameter, not in condition
method m3(r:Ref, r2:Ref, i:Int)
requires r!= r2
requires acc(p2(r, -1))
ensures acc(p2(r, -1))
{
	inhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	unfold p2(r, -1)
	fold p2(r, -1)
	exhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	unfold p2(r, -1)
	fold p2(r, -1)
}

//different predicate
method m4(r:Ref, i:Int)
 requires acc(p1(r))
 ensures acc(p1(r))
 {
 	inhale forall x:Int :: x > 0 ==> acc(p2(r, x))
 	unfold p1(r)
 	fold p1(r)
 	exhale forall x:Int :: x > 0 ==> acc(p2(r, x))
 	unfold p1(r)
 	fold p1(r)
 }

method m5(r:Ref, r2:Ref, i:Int)
 requires acc(r.f)
 requires acc(r2.f)
 requires acc(r2.f) --* r2 != null && acc(r2.g) && r2.g == i
 requires acc(r.f) --* r != null && acc(r.g) && r.g == i
 {

    inhale forall x:Int :: (x != i) ==> acc(p2(r, x))
    apply acc(r.f) --* r != null && acc(r.g) && r.g == i
    assert(r.g == i)
    package acc(r.f) --* r != null && acc(r.g) && r.g == i
    exhale forall x:Int :: (x != i) ==> acc(p2(r, x))
    apply  acc(r2.f) --* r2 != null && acc(r2.g) && r2.g == i
    assert (r2.g == i)
    package  acc(r2.f) --* r2 != null && acc(r2.g) && r2.g == i
 }

