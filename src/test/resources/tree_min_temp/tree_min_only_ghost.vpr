// first ghost specs to work
// then functional specs (uncomment)

field l : Ref
field r : Ref
field val : Int

predicate BST(t : Ref) {
   (t != null) ==> acc(t.val) && acc(t.l) && acc(t.r) && BST(t.l) && BST(t.r)
   //&& t.val > max(keys(t.l))
   //&& forall i : Int :: (0 <= i < |keys(t.l)|) ==> keys(t.l)[i] < t.val
   //&& forall j : Int :: (0 <= j < |keys(t.r)|) ==> keys(t.r)[j] > t.val
}


function keys(t : Ref): Seq[Int]
    requires BST(t)
{
    (t != null) ? unfolding BST(t) in Seq(t.val) ++ keys(t.l) ++ keys(t.r) : Seq()

}


function min(s : Seq[Int]): Int
    ensures
        // If s is empty, result == 0
        (|s| == 0) ==> (result == 0)
      ensures
        // If s is non-empty, result is an element of s AND is <= every element of s
        (|s| > 0) ==> (
          (exists i: Int :: 0 <= i < |s| && s[i] == result)  &&
          (forall i: Int :: 0 <= i < |s| ==> result <= s[i])
        )
{

       |s| == 0 ? 0 : min_acc(s[1..], s[0])

}


function min_acc(s : Seq[Int], accu : Int): Int
     ensures
        // The result is <= every element of s
        (forall i: Int :: 0 <= i < |s| ==> result <= s[i])
      ensures
        // The result is <= the accumulator as well
        result <= accu
      ensures
        // And the result is either the accumulator itself or one of the elements in s
        (result == accu) || (exists i: Int :: 0 <= i < |s| && result == s[i])
   {
    |s| == 0 ? accu : s[0] < accu ? min_acc(s[1..], s[0]) : min_acc(s[1..], accu)
}

function max(s : Seq[Int]): Int
{

        max_acc(s, -1)

}


function max_acc(s : Seq[Int], accu : Int): Int{
    |s| == 0 ? accu : s[0] > accu ? max_acc(s[1..], s[0]) : max_acc(s[1..], accu)
}







method tree_min(t : Ref) returns (t_final : Ref, m : Int)
    requires BST(t) && t != null
    ensures BST(t_final)
    //ensures m == min(old(keys(t)))
    //ensures keys(t_final) ++ Seq(m) == old(keys(t))


    {
    t_final := t


    var parent : Ref // curr's parent
    var curr : Ref
    var lchild : Ref // curr's left child

    unfold BST(t_final)
    curr := t_final.l

    if(curr == null){
        m := t_final.val
        //lchild := t.r
        t_final := t_final.r
    }else{
        parent := t_final

        unfold BST(curr)
        lchild := curr.l

        fold BST(curr)

        while(lchild != null)
            requires
                 acc(parent.l)
            && acc(parent.val)
            && BST(curr)
            && curr != null
            && parent.l == curr
            //&& parent.val > max(keys(parent.l))
            
            && unfolding BST(curr) in curr.l == lchild
            

            

            ensures curr != null
            && acc(pre(parent).l)
            && acc(pre(parent).val)
            //&& acc(pre(parent).val)
            //&& acc(t_final.l)

            && BST(pre(parent).l)

            //&& pre(parent).val > max(keys(pre(parent).l))
           // && forall i : Int :: (0 <= i < |keys(pre(parent).l)|) ==> keys(pre(parent).l)[i] < pre(parent).val

            //&& m == min(keys(parent.l))
            //&& keys(parent.l) ++ Seq(m) == pre(keys(parent.l))
        {
            parent := curr
            unfold BST(curr)
            unfold BST(curr.l)
            curr := lchild

            lchild := curr.l // lchild :=  lchild.l

            fold BST(curr)

            ghost{
                fold BST(pre(parent).l) //or fold BST(parent)??
            }

        }
        basecase{
            unfold BST(curr)
            m := curr.val
            lchild := curr.r
            exhale acc(curr.val) && acc(curr.l) && acc(curr.r)

            parent.l := lchild

            //                  parent
            //              /
            //          curr
            //         /                  \
            // lchild = null       curr.r

        }
        fold BST(t_final)


    }

}




