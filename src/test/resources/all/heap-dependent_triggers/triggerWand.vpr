// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

method m1(xs: Set[Ref], y: Ref) {
    inhale forall x: Ref :: x in xs ==> acc(x.f)
    inhale forall x: Ref :: {acc(x.f) --* acc(y.f)} x in xs ==> acc(x.f) --* acc(y.f)
    var z: Ref
    assume z in xs
    apply acc(z.f) --* acc(y.f)
}

method m2(xs: Set[Ref], ys: Set[Ref]) {
    var z: Ref
    inhale forall x: Ref :: x == z ==> acc(x.f)
    inhale forall x: Ref, y: Ref :: x in xs && y in ys ==> acc(x.f) --* acc(y.f)
    inhale forall x: Ref, y: Ref :: {acc(x.f) --* acc(y.f)} x in xs && y in ys ==> x != y

    //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/257/)
    assert forperm x: Ref, y: Ref [acc(x.f) --* acc(y.f)] :: x != y
}

method m3(xs: Set[Ref], ys: Set[Ref]) {
    var z: Ref
    inhale forall x: Ref :: x == z ==> acc(x.f)
    inhale forall x: Ref, y: Ref :: x in xs && y in ys ==> acc(x.f) --* acc(y.f)
    inhale forall x: Ref, y: Ref :: {acc(x.f) --* acc(y.f)} x in xs && y in ys ==> x != y

    var a: Ref
    var b: Ref
    assume a in xs
    assume b in ys

    assert perm(acc(a.f) --* acc(b.f)) == write
    //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/257/)
    assert a != b
}
