// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Int

method m1(x: Ref, y: Ref, as: Set[Ref]) {
    inhale forall a: Ref :: a in as ==> acc(a.f)
    inhale forall a: Ref :: a in as ==> acc(a.f) --* acc(x.g)
    assume x in as && y in as
    assert perm(acc(x.f) --* acc(x.g)) == write
    assert perm(acc(y.f) --* acc(x.g)) == write
    //:: ExpectedOutput(assert.failed)
    assert perm(acc(y.f) --* acc(y.g)) == write
}

method m2(x: Ref, y: Ref, as: Set[Ref]) {
    inhale forall a: Ref :: a in as ==> acc(a.f)
    assume x in as
    inhale forall a: Ref :: a in as && a.f > 3 ==> acc(a.f) --* acc(x.g)
    inhale x.f > 3
    assert perm(acc(x.f) --* acc(x.g)) == write
    inhale acc(y.f) --* acc(y.g)

    if (x == y) {
        assert perm(acc(x.f) --* acc(x.g)) == 2 * write
    }
}

method m3(xs: Set[Ref], ys: Set[Ref]) {

    inhale (forall x: Ref :: x in xs ==> acc(x.f)) --* (forall y: Ref :: y in ys ==> acc(y.f))

    assert perm((forall x: Ref :: x in xs ==> acc(x.f)) --* (forall y: Ref :: y in ys ==> acc(y.f))) == write
}