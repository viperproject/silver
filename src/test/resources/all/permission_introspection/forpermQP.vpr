// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

   method m1(x: Ref, y: Ref, z: Ref) {
       inhale acc(x.f)
       inhale acc(y.f) && acc(z.f)
       inhale y != x
       inhale z != x

       var g: Ref

       inhale acc(g.f)
       inhale forall a: Ref :: a == g ==> acc(a.f) && a.f < 3

       //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/243/)
       assert !forperm a: Ref [a.f] :: a.f > 3

       inhale forall a: Ref :: a == x || a == y ==> a.f == 4
       inhale forall a: Ref :: a == z ==> a.f == 10

       assert forperm a: Ref [a.f] :: a == g || a.f > 3
   }

   method m2(x: Ref, y: Ref){
       inhale forall a: Ref :: a == x ==> P(x, 3)
       inhale forall a: Ref :: a == y ==> P(y, 0)

       assert forperm a: Ref, i: Int [P(a, i)] :: i >= 0
   }

method m3(x: Ref, y: Ref, z: Ref){
    inhale acc(x.f)
    inhale acc(z.f)
    inhale x.f == 5
    inhale z.f == 10
    inhale x != y
    inhale z != y
    assert forall a: Ref :: perm(a.f) == write ==> a == x || a == z
    inhale forall a: Ref :: a == x || a == z ==> acc(a.f) --* acc(y.f)

    assert forperm a: Ref [a.f] :: a.f > 0

    assert forperm a: Ref [acc(a.f) --* acc(y.f)] :: a == x || a == z
    assert forperm a: Ref, b: Ref [acc(a.f) --* acc(b.f)] :: b == y
}

method m4(x: Ref, y: Ref) {
    inhale forall a: Ref :: (a == x || a == y) ==> p2(a,x)
    inhale x != y

    assert forperm a: Ref [p2(a,a)] :: a == x
}

method m5(x: Ref, y: Ref, z: Ref) {
    inhale x != y
    inhale z != y
    inhale forall a: Ref :: a == x ==> P(a,3)
    inhale forall a: Ref :: (a == y ==> P(a,10)) && (a == z ==> P(a,3))

    assert forperm a: Ref [P(a,3)] :: a == x || a == z
}

method m6(x: Ref, y: Ref) {
    inhale forall a: Ref :: a == x ==> P(a,10)
    inhale forall a: Ref :: a == y ==> P(a,5)
    inhale x != y

    assert forperm a: Ref [P(a,10)] :: a == x
}

method m7(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref]) {
    inhale (forall x: Ref :: x in xs ==> acc(x.f)) --* (forall y: Ref :: y in ys ==> acc(y.f))
    inhale (forall z: Ref :: z in zs ==> acc(z.f)) --* (forall y: Ref :: y in ys ==> acc(y.f))

    assert forperm a: Perm [(forall x: Ref :: x in xs ==> acc(x.f, a)) --* (forall y: Ref :: y in ys ==> acc(y.f, a))] :: a == write
}

predicate P(x: Ref, i: Int) {
    acc(x.f) && x.f > i
}

predicate p2(x: Ref, y: Ref) {
    acc(x.f) && acc(y.f)
}