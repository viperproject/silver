// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain Array {
  function len(_a:Array) : Int
  function slot(_a:Array, i:Int) : Ref // map to a ghost object with a "val" field
  function slotToArray(_r: Ref) : Array
  function slotToIndex(_r: Ref) : Int

  axiom injectivity {
    forall _a: Array, i:Int ::
      0 <= i && i < len(_a) ==> slotToArray(slot(_a,i)) == _a && slotToIndex(slot(_a,i)) == i
  }

  axiom lenPositive {
    forall _a: Array :: len(_a) >= 0
  }
}
field val : Seq[Seq[Int]]  // array slot values

function valid(s : Seq[Int], lenTiles: Int, isStart: Bool) : Bool
{
  (|s| == 0 ? lenTiles == 0 :
   |s| == 1 ? // just reds
   lenTiles == s[0] && (isStart ? s[0] == 0 || s[0] >= 3 : s[0] >= 3) :
   (isStart ? s[0] == 0 || s[0] >= 3 : s[0] >= 3) && s[1] > 0 &&
   valid(s[2..], lenTiles - s[1] - s[0], false)
  )
}

//solutions: in a

// NOTE: we store all solutions in an array. count[i] is represented by |slot(a,i).val|


method colourings0(a: Array)
  requires len(a) == 51
  requires forall i: Int :: 0 <= i && i < len(a) ==> acc(slot(a,i).val)
{
  slot(a,0).val := Seq(Seq())
  //assert forall j:Int :: 0 <= j && j < |slot(a,0).val| ==>
   //     valid(slot(a,0).val[j],0,true)

  slot(a,1).val := Seq(Seq(0,1)) // no red, 1 black
  assert valid(Seq(),0,false) // needed for unrolling valid
  //assert Seq(0,1)[2..] == Seq() // sequence incompleteness
  // // UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/380/)
  // // UnexpectedOutput(assert.failed:assertion.false, /silver/issue/80/) // fixed with diff 5 in Carbon
  assert forall j:Int :: 0 <= j && j < |slot(a,1).val| ==>
        slot(a,1).val[j] == Seq(0,1) && valid(slot(a,1).val[j],1,true)
}



// We represent sequences of "how many reds", "how many blacks", "how many reds", etc.
method colourings1(a: Array)
  requires len(a) == 51
  requires forall i: Int :: 0 <= i && i < len(a) ==> acc(slot(a,i).val)
{
  slot(a,0).val := Seq(Seq())
  //assert forall j:Int :: 0 <= j && j < |slot(a,0).val| ==>
   //     valid(slot(a,0).val[j],0,true)

  slot(a,1).val := Seq(Seq(0,1)) // no red, 1 black
  assert valid(Seq(),0,false) // needed for unrolling valid
  assert Seq(0,1)[2..] == Seq() // sequence incompleteness
  assert forall j:Int :: 0 <= j && j < |slot(a,1).val| ==>
        slot(a,1).val[j] == Seq(0,1) && valid(slot(a,1).val[j],1,true)

  slot(a,2).val := Seq(Seq(0,2)) // no red, 2 black
  assert Seq(0,2)[2..] == Seq()
  assert forall j:Int :: 0 <= j && j < |slot(a,2).val| ==>
      valid(slot(a,2).val[j],2,true)

  slot(a,3).val := Seq(Seq(0,3),Seq(3)) // no red, 3 black / 3 red
  assert Seq(0,3)[2..] == Seq()
  assert forall j:Int :: 0 <= j && j < |slot(a,3).val| ==>
      valid(slot(a,3).val[j],3,true)

  var n : Int := 4
  while(n <= 50)
  invariant 4 <= n && n <= 51
  invariant len(a) == 51
  invariant forall i: Int :: 0 <= i && i < len(a) ==> acc(slot(a,i).val)
  invariant forall m: Int, j:Int :: 0 <= m && m < n && 0 <= j && j < |slot(a,m).val| ==>
        valid(slot(a,m).val[j],m,true)
  {
    slot(a,n).val := Seq() // none yet
    // count[n] := count[n-1]
    var i : Int := 0
    while(i < |slot(a,n-1).val|)
      invariant acc(slot(a,n-1).val, 1/2)
      invariant len(a) == 51
      invariant 0 <= i && i <= |slot(a,n-1).val|
      invariant acc(slot(a,n).val)
      invariant |slot(a,n).val| == i
      invariant forall j:Int :: 0 <= j && j < |slot(a,n-1).val| ==>
        valid(slot(a,n-1).val[j],n-1,true)
      invariant forall j : Int :: {slot(a,n).val[j]} 0 <= j && j < i ==> valid(slot(a,n).val[j],n,true)
    {
      var oldSoln : Seq[Int] := slot(a,n-1).val[i]
      var soln : Seq[Int]
      // prepend black tile
      if(oldSoln[0] == 0) {  // therefore seq is of length >= 2
        soln := oldSoln[1 := oldSoln[1]+1] // add one to initial blacks
       // assert soln[2..] == oldSoln[2..]
        // // UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/380/)
        assert valid(soln,n,true) 
      } else {
        soln := Seq(0,1) ++ oldSoln
        assert soln[2..] == oldSoln
        assert valid(oldSoln,n-1,false)
        assert valid(soln,n,true)
      }
      slot(a,n).val := slot(a,n).val ++ Seq(soln)
      i := i + 1
    }

    n := n + 1
  }


}


// We represent sequences of "how many reds", "how many blacks", "how many reds", etc.
method colourings2(a: Array)
  requires len(a) == 51
  requires forall i: Int :: {slot(a,i).val} 0 <= i && i < len(a) ==> acc(slot(a,i).val)
{
  slot(a,0).val := Seq(Seq())
  //assert forall j:Int :: 0 <= j && j < |slot(a,0).val| ==>
   //     valid(slot(a,0).val[j],0,true)

  slot(a,1).val := Seq(Seq(0,1)) // no red, 1 black
  assert valid(Seq(),0,false) // needed for unrolling valid
  assert Seq(0,1)[2..] == Seq() // sequence incompleteness
  assert forall j:Int :: 0 <= j && j < |slot(a,1).val| ==>
        slot(a,1).val[j] == Seq(0,1) && valid(slot(a,1).val[j],1,true)

  slot(a,2).val := Seq(Seq(0,2)) // no red, 2 black
  assert Seq(0,2)[2..] == Seq()
  assert forall j:Int :: 0 <= j && j < |slot(a,2).val| ==>
      valid(slot(a,2).val[j],2,true)

  slot(a,3).val := Seq(Seq(0,3),Seq(3)) // no red, 3 black / 3 red
  assert Seq(0,3)[2..] == Seq()
  assert forall j:Int :: 0 <= j && j < |slot(a,3).val| ==>
      valid(slot(a,3).val[j],3,true)

  var n : Int := 4
  while(n <= 50)
  invariant 4 <= n && n <= 51
  invariant len(a) == 51
  invariant forall i: Int :: 0 <= i && i < len(a) ==> acc(slot(a,i).val)
  invariant forall m: Int, j:Int :: 0 <= m && m < n && 0 <= j && j < |slot(a,m).val| ==>
        valid(slot(a,m).val[j],m,true)
  {
    slot(a,n).val := Seq() // none yet
    // count[n] := count[n-1]
    var i : Int := 0
    while(i < |slot(a,n-1).val|)
      invariant acc(slot(a,n-1).val, 1/2)
      invariant len(a) == 51
      invariant 0 <= i && i <= |slot(a,n-1).val|
      invariant acc(slot(a,n).val)
      invariant |slot(a,n).val| == i
      invariant forall j:Int :: 0 <= j && j < |slot(a,n-1).val| ==>
        valid(slot(a,n-1).val[j],n-1,true)
      invariant forall j : Int :: {slot(a,n).val[j]} 0 <= j && j < i ==> valid(slot(a,n).val[j],n,true)
    {
      var oldSoln : Seq[Int] := slot(a,n-1).val[i]
      var soln : Seq[Int]
      // prepend black tile
      if(oldSoln[0] == 0) {  // therefore seq is of length >= 2
        soln := oldSoln[1 := oldSoln[1]+1] // add one to initial blacks
        assert soln[2..] == oldSoln[2..]
        assert valid(soln,n,true)
      } else {
        soln := Seq(0,1) ++ oldSoln
        //assert soln[2..] == oldSoln
        assert valid(oldSoln,n-1,false)
        // // UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/380/)
        assert valid(soln,n,true)
      }
      slot(a,n).val := slot(a,n).val ++ Seq(soln)
      i := i + 1
    }

    n := n + 1
  }


}
// We represent sequences of "how many reds", "how many blacks", "how many reds", etc.
method colourings(a: Array)
  requires len(a) == 51
  requires forall i: Int :: 0 <= i && i < len(a) ==> acc(slot(a,i).val)
{
  slot(a,0).val := Seq(Seq())
  //assert forall j:Int :: 0 <= j && j < |slot(a,0).val| ==>
   //     valid(slot(a,0).val[j],0,true)

  slot(a,1).val := Seq(Seq(0,1)) // no red, 1 black
  assert valid(Seq(),0,false) // needed for unrolling valid
  assert Seq(0,1)[2..] == Seq() // sequence incompleteness
  assert forall j:Int :: 0 <= j && j < |slot(a,1).val| ==>
        slot(a,1).val[j] == Seq(0,1) && valid(slot(a,1).val[j],1,true)

  slot(a,2).val := Seq(Seq(0,2)) // no red, 2 black
  assert Seq(0,2)[2..] == Seq()
  assert forall j:Int :: 0 <= j && j < |slot(a,2).val| ==>
      valid(slot(a,2).val[j],2,true)

  slot(a,3).val := Seq(Seq(0,3),Seq(3)) // no red, 3 black / 3 red
  assert Seq(0,3)[2..] == Seq()
  assert forall j:Int :: 0 <= j && j < |slot(a,3).val| ==>
      valid(slot(a,3).val[j],3,true)

  var n : Int := 4
  while(n <= 50)
  invariant 4 <= n && n <= 51
  invariant len(a) == 51
  invariant forall i: Int :: 0 <= i && i < len(a) ==> acc(slot(a,i).val)
  invariant forall m: Int, j:Int :: 0 <= m && m < n && 0 <= j && j < |slot(a,m).val| ==>
        valid(slot(a,m).val[j],m,true)
  {
    slot(a,n).val := Seq() // none yet
    // count[n] := count[n-1]
    var i : Int := 0
    while(i < |slot(a,n-1).val|)
      invariant acc(slot(a,n-1).val, 1/2)
      invariant len(a) == 51
      invariant 0 <= i && i <= |slot(a,n-1).val|
      invariant acc(slot(a,n).val)
      invariant |slot(a,n).val| == i
      invariant forall j:Int :: 0 <= j && j < |slot(a,n-1).val| ==>
        valid(slot(a,n-1).val[j],n-1,true)
      invariant forall j : Int :: {slot(a,n).val[j]} 0 <= j && j < i ==> valid(slot(a,n).val[j],n,true)
    {
      var oldSoln : Seq[Int] := slot(a,n-1).val[i]
      var soln : Seq[Int]
      // prepend black tile
      if(oldSoln[0] == 0) {  // therefore seq is of length >= 2
        soln := oldSoln[1 := oldSoln[1]+1] // add one to initial blacks
        assert soln[2..] == oldSoln[2..]
        assert valid(soln,n,true)
      } else {
        soln := Seq(0,1) ++ oldSoln
        assert soln[2..] == oldSoln
        assert valid(oldSoln,n-1,false)
        assert valid(soln,n,true)
      }
      slot(a,n).val := slot(a,n).val ++ Seq(soln)
      i := i + 1
    }

    n := n + 1
  }


}


method test_extend(s:Seq[Int])
{
  var ss : Seq[Int] := s ++ Seq(42)
  assert forall i:Int :: i in s ==> i in ss[..|ss|-1]
}

method test_extend_left(s:Seq[Int])
{
  var ss : Seq[Int] := Seq(42) ++ s
   // // UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/380/)
   assert forall i:Int :: i in s ==> i in ss[1..]
}

method test_append_left(s:Seq[Int], t:Seq[Int])
{
  var ss : Seq[Int] := s ++ t
  assert forall i:Int :: i in s ==> i in ss[..|s|]
}

method test_append_right(s:Seq[Int], t:Seq[Int])
{
  var ss : Seq[Int] := s ++ t
   // // UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/380/)
  assert forall i:Int :: i in t ==> i in ss[|s|..]
}