// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

predicate P(r: Ref) {forall e : Ref :: e in refs(r) ==> acc(Q(e), wildcard)}
predicate P2(r: Ref) {forall e : Ref :: e in refs(r) ==> acc(Q(e), 1/2)}
predicate R(r: Ref) {forall e : Ref :: e in refs(r) ==> acc(e.q, wildcard)}
predicate R2(r: Ref) {forall e : Ref :: e in refs(r) ==> acc(e.q, 1/2)}
predicate Q(r: Ref)
field q: Ref

function refs(r: Ref) : Set[Ref]

function get(r: Ref): Ref
    ensures result in refs(r)

function tester(r: Ref): Ref
    requires acc(Q(r), wildcard)

function testerFull(r: Ref): Ref
    requires acc(Q(r), write)

function testerfield(r: Ref): Ref
    requires acc(r.q, wildcard)

function testerfieldFull(r: Ref): Ref
    requires acc(r.q, write)


method pred1(r: Ref)
    requires acc(P(r), wildcard)
{
    unfold acc(P(r), wildcard)
    fold acc(P(r), wildcard)
    unfold acc(P(r), wildcard)
    var r2 : Ref := tester(get(r))

    var r3 : Ref := testerFull(get(r))
}

method pred2(r: Ref)
    requires acc(P(r), write)
{
    unfold acc(P(r))
    fold acc(P(r))
    unfold acc(P(r))
    var r2 : Ref := tester(get(r))

    var r3 : Ref := testerFull(get(r))
}

method pred3(r: Ref)
    requires acc(P(r), write)
{
    unfold acc(P(r), 1/2)
    fold acc(P(r), 1/2)
    unfold acc(P(r), 1/2)
    var r2 : Ref := tester(get(r))

    var r3 : Ref := testerFull(get(r))
}

method pred4(r: Ref)
    requires acc(P2(r), write)
{
    unfold acc(P2(r), wildcard)
    fold acc(P2(r), wildcard)
    unfold acc(P2(r), wildcard)
    var r2 : Ref := tester(get(r))

    var r3 : Ref := testerFull(get(r))
}

method func1(r: Ref)
    requires acc(R(r), wildcard)
{
    unfold acc(R(r), wildcard)
    fold acc(R(r), wildcard)
    unfold acc(R(r), wildcard)
    var r2 : Ref := testerfield(get(r))

    var r3 : Ref := testerfieldFull(get(r))
}

method func2(r: Ref)
    requires acc(R(r), write)
{
    unfold acc(R(r))
    fold acc(R(r))
    unfold acc(R(r))
    var r2 : Ref := testerfield(get(r))

    var r3 : Ref := testerfieldFull(get(r))
}

method func3(r: Ref)
    requires acc(R(r), write)
{
    unfold acc(R(r), 1/2)
    fold acc(R(r), 1/2)
    unfold acc(R(r), 1/2)
    var r2 : Ref := testerfield(get(r))

    var r3 : Ref := testerfieldFull(get(r))
}

method func4(r: Ref)
    requires acc(R2(r), write)
{
    unfold acc(R2(r), wildcard)
    fold acc(R2(r), wildcard)
    unfold acc(R2(r), wildcard)
    var r2 : Ref := testerfield(get(r))

    var r3 : Ref := testerfieldFull(get(r))
}
