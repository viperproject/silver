// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

 field next: Ref
 field data: Int

 predicate list(this: Ref) {
        acc(this.next)
   && acc(this.data)
   && (this.next != null ==>
            acc(list(this.next))
         && unfolding list(this.next) in this.data <= this.next.data)
 }

method test01(this: Ref)
  requires acc(list(this))
{
  unfold acc(list(this), 1/2)
    /* Unexpectedly fails:
     *   Unfolding list(this) might fail.
     *   There might be insufficient permission to access list(this.next)
     */
}



function foo(this: Ref): Bool
  requires acc(list(this))
{ true }

predicate bla(this: Ref) {
     acc(list(this))
  && foo(this)
}

method test02(this: Ref)
  requires acc(bla(this), 1/2)
{
  unfold acc(bla(this), 1/2)
}

method test03(this: Ref)
  requires acc(list(this), 1/2)
{
  fold acc(bla(this), 1/2)
}

method test04a(this: Ref)
  requires acc(bla(this), 1/2)
{
  assert unfolding acc(bla(this), 1/2) in true
}

method test04b(this: Ref)
  requires acc(bla(this), 1/2)
{

  assert unfolding acc(bla(this), 1/2) in foo(this)
}

predicate blabla(this: Ref) { bla(this) }

method test05(this: Ref)
  requires blabla(this)
{
  assert unfolding acc(blabla(this), 1/3) in unfolding acc(bla(this), 1/5) in true
}



function foo_qp(xs: Set[Ref]): Bool
  requires forall x: Ref :: x in xs ==> acc(x.data)
{ true }

predicate bla_qp(xs: Set[Ref]) {
     (forall x: Ref :: x in xs ==> acc(x.data))
  && foo_qp(xs)
}

method test02_qp(xs: Set[Ref])
  requires acc(bla_qp(xs), 1/2)
{
  unfold acc(bla_qp(xs), 1/2)
}

method test03_qp(xs: Set[Ref])
  requires forall x: Ref :: x in xs ==> acc(x.data, 1/2)
{
  fold acc(bla_qp(xs), 1/2)
}

method test04a_qp(xs: Set[Ref])
  requires acc(bla_qp(xs), 1/2)
{
  assert unfolding acc(bla_qp(xs), 1/2) in true
}

method test04b_qp(xs: Set[Ref])
  requires acc(bla_qp(xs), 1/2)
{

  assert unfolding acc(bla_qp(xs), 1/2) in foo_qp(xs)
}
