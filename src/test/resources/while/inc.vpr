field val : Int
field next : Ref

predicate List(l : Ref) {
   (l == null) ? true : acc(l.val) && acc(l.next) && List(l.next)
}


function values(l: Ref): Seq[Int]
    requires List(l)
{
    unfolding List(l) in l == null
        ? Seq()
        : Seq(l.val) ++ values(l.next)
}

method add_recursive(l : Ref)
  requires List(l)
  ensures List(l)
  ensures |values(l)| == |old(values(l))|
  ensures forall i : Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l)[i]) + 1
   {
  unfold List(l)
  if(l != null){
    l.val := l.val + 1
    add_recursive(l.next)
  }else{
    // Base Case Code
  }
  // Ghost Code
  fold List(l)
}

/* method add_recursive(l : Ref)
  requires precondition
  ensures postcondition
   {
  if(l != null){
    Body
    Recursive Call
  }else{
    Base Case Code
  }
  Ghost Code
} */



predicate lseg(l : Ref, last : Ref) { // from l to end (excl.)
   l != last ==> acc(l.next) && acc(l.val) && lseg(l.next, last)
}



/* method length(this: Ref) returns (res: Int)
   requires this != null && lseg(this, null)
   ensures lseg(this, null)
   {
      res := 0
      var curr: Ref := this
      unfold lseg(this, null)
      fold lseg(this, curr)  // empty segment to establish loop invariant
      while(curr.next != null)
      invariant acc(curr.next) && acc(curr.val) && lseg(curr.next, null) && lseg(this, curr)
      {
         res := res + 1
         var tmp: Ref; tmp := curr.next // read here, before permission is folded
         addAtEnd(this, curr, curr.next) // extend predicate
         curr := tmp
         unfold lseg(curr, null)
      }
      addAtEnd(this, curr, null)

   } */

predicate ListSeg(l : Ref, end : Ref) { // from l to end (excl.)
   l != end ==> acc(l.next) && acc(l.val) && ListSeg(l.next, end)
}

function vals(l: Ref, end : Ref): Seq[Int]
    requires ListSeg(l, end)
{
    unfolding ListSeg(l, end) in l == end
        ? Seq()
        : Seq(l.val) ++ vals(l.next, end)
}

method addAtEnd(this: Ref, n: Ref, nn: Ref)
   requires ListSeg(this, n) &&  acc(ListSeg(nn, null), 1/2) && n != nn
   requires acc(n.next) && acc(n.val) && n.next == nn
   ensures ListSeg(this, nn) && acc(ListSeg(nn, null), 1/2)
   ensures vals(this, nn) ==  old(vals(this, n)) ++  Seq(old(n.val))
   {
      if(this == n) {
         fold ListSeg(nn, nn)  // empty segment
         fold ListSeg(this, nn)
      } else {
         unfold ListSeg(this, n)
         assert(unfolding acc(ListSeg(nn, null), 1/2) in nn != this)
         addAtEnd(this.next, n, nn)
         fold ListSeg(this, nn)
      }
   }

method add_iterative(l : Ref)
   requires l!= null && ListSeg(l, null)
   ensures ListSeg(l, null)
   ensures |vals(l, null)| == |old(vals(l, null))|
   ensures forall i : Int :: (0 <= i < |vals(l, null)|) ==> vals(l, null)[i] == old(vals(l, null)[i]) + 1
   {
      var curr: Ref := l
      unfold ListSeg(l, null)
      fold ListSeg(l, curr)  // empty segment to establish loop invariant

      var idx : Int := 0

      while(curr.next != null)
         invariant acc(curr.next) && acc(curr.val) && ListSeg(curr.next, null) // ListSeg(curr, null)

         invariant ListSeg(l, curr)
         invariant |vals(l, curr)| + |vals(curr.next, null)|+ 1 ==  |old(vals(l, null))|
         invariant idx == |vals(l, curr)|
         invariant vals(curr.next, null) == old(vals(l, null))[idx + 1..]
         invariant curr.val == old(vals(l, null)[idx])

         invariant forall i : Int :: (0 <= i < idx) ==> vals(l, curr)[i] == old(vals(l, null)[i]) + 1
      {

         var tmp: Ref; tmp := curr.next // read here, before permission is folded
         curr.val := curr.val + 1
         assert(unfolding ListSeg(curr.next, null) in curr != curr.next)
         addAtEnd(l, curr, curr.next) // extend predicate
         curr := tmp

         unfold ListSeg(curr, null)

         idx := idx + 1
      }
      // Deal with last value
      curr.val := curr.val + 1

      // Extend predicate one last time also for the last value
      addAtEnd(l, curr, null)

}


