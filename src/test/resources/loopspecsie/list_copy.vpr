field val : Int
field next : Ref
//field prev : Ref


predicate List(l : Ref) {
   (l != null) ==> acc(l.val) && acc(l.next) && List(l.next)
}


function values(l: Ref): Seq[Int]
    requires List(l)
{
    unfolding List(l) in
    l == null
        ? Seq()
        : Seq(l.val) ++ values(l.next)
}

// Pre: List(curr)
// Post: List(curr)
//

// swap c and l
method list_copy(input : Ref) returns (res : Ref)
    requires List(input)
    ensures List(input)
    ensures List(res)
    ensures values(input) == values(res)
    {

    var input_ptr : Ref, res_ptr : Ref, curr_append : Ref
    if(input == null){
        res := null
        fold List(res)
    }else{
        unfold List(input)

        res := new(val, next)
        res.next := null
        res.val := input.val

        res_ptr := res
        input_ptr := input.next

        while(input_ptr != null)
            requires List(input_ptr)
            && acc(res_ptr.next) && acc(res_ptr.val)  // maybe list?? how to add this?? why does list(null) not work??
            && res_ptr.next == null
            ensures List(pre(res_ptr)) && values(pre(res_ptr)) == Seq(pre(res_ptr.val)) ++ pre(values(input_ptr))
            && List(pre(input_ptr)) && values(pre(input_ptr)) == pre(values(input_ptr))
        {
            unfold List(input_ptr) // i.e. input_ptr.val, input_ptr.next, List(input_ptr.next)

            curr_append := new(val, next) // new stmt
            curr_append.next := null //field assign
            curr_append.val := input_ptr.val

            res_ptr.next := curr_append
            //fold List(curr_append)
            //fold List(input_ptr)

            res_ptr := curr_append // res_ptr.next = null //lvar assign
            input_ptr := input_ptr.next

            ghost{
                        fold List(pre(res_ptr))
                        fold List(pre(input_ptr))
                    }
        }basecase{
            fold List(pre(res_ptr.next)) //maybe we cant fold for this one??
            fold List(pre(res_ptr))
            fold List(pre(input_ptr))
        }

        fold List(input)
        //fold List(res)

    }
}

