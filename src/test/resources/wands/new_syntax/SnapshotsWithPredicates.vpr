// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Int

predicate wandPair(x: Ref) {
    //:: ExpectedOutput(consistency.error)
    acc(x.f) --* acc(x.f) && acc(x.g)
}

predicate Cell(x: Ref) {
    acc(x.f)
}

method test0(x: Ref)
requires acc(x.f) && acc(x.g) && x.f == 0 && x.g == 0
ensures acc(x.f) && acc(x.g) && x.f == 0 && x.g == 0 {
    package acc(x.f) --* acc(x.f) && acc(x.g)
    fold wandPair(x)
    unfold wandPair(x)
    apply acc(x.f) --* acc(x.f) && acc(x.g)
}

method test1(x: Ref)
requires acc(x.f)
ensures acc(x.f) && x.f == old(x.f) {
    fold Cell(x)
    package Cell(x) --* Cell(x)
    apply Cell(x) --* Cell(x)
    unfold Cell(x)
}

method test2(x: Ref)
requires acc(x.f)
ensures acc(x.f) && x.f == old(x.f) {
    fold Cell(x)
    package true --* Cell(x)
    apply true --* Cell(x)
    unfold Cell(x)
}

method test3(x: Ref)
requires acc(x.f)
ensures acc(x.f) && x.f == old(x.f) {
    fold Cell(x)
    package Cell(x) --* acc(x.f) {
        unfold Cell(x)
    }
    apply Cell(x) --* acc(x.f)
}

method test4(x: Ref)
requires acc(x.f) && acc(x.g)
ensures acc(x.f) && acc(x.g) && x.f == old(x.f) && x.g == old(x.g) {
    package true --* acc(x.g) && Cell(x) {
        fold Cell(x)
    }
    apply true --* acc(x.g) && Cell(x)
    unfold Cell(x)
}
