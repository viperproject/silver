// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/silver/issue/478/)

field f: Int

predicate Cell(x: Ref) {
    acc(x.f)
}

function get(x: Ref): Int
//:: ExpectedOutput(consistency.error)
requires true --* acc(x.f) {
    applying (true --* acc(x.f)) in x.f
}

method test0(x: Ref)
requires acc(x.f)
ensures (true --* acc(x.f)) && (applying (true --* acc(x.f)) in x.f) == old(x.f) {
    package true --* acc(x.f)
}

method test1(x: Ref)
requires acc(x.f) {
    package true --* acc(x.f)
    package true --* true {
        //:: ExpectedOutput(assert.failed:wand.not.found)
        assert applying (true --* acc(x.f)) in x.f == old(x.f)
    }
}

method test2(x: Ref)
requires acc(x.f) {
    package true --* acc(x.f)
    package true --* true {
        assert (true --* acc(x.f)) && (applying (true --* acc(x.f)) in x.f) == old(x.f)
    }
}

method test3(x: Ref)
requires acc(x.f)
ensures (true --* acc(x.f)) && get(x) == old(x.f) {
    package true --* acc(x.f)
}
