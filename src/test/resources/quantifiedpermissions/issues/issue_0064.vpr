// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

// NOTE: we should add triggers to this test case, to fully document our expectations.

method m01(S1: Seq[Ref], S2: Set[Ref], x: Ref)
  requires S1 == Seq(x) && S2 == Set(x)
  requires forall i: Int :: i in [0..|S1|) ==> acc(S1[i].f)
  ensures  forall y: Ref :: y in S2 ==> acc(y.f) /* y in Set fails */
{}


method m02(S1: Seq[Ref], S2: Set[Ref], x: Ref)
  requires S1 == Seq(x) && S2 == Set(x)
  requires forall i: Int :: i in [0..|S1|) ==> acc(S1[i].f)
  ensures  forall y: Ref :: y in S1 ==> acc(y.f) /* y in Seq holds */
{}

method m03(S1: Seq[Ref], S2: Set[Ref], x: Ref)
  requires S1 == Seq(x) && S2 == Set(x)
  requires forall i: Int :: i in [0..|S1|) ==> S1[i] != null
  ensures  forall y: Ref :: y in S2 ==> y != null
{}

method m04(S1: Seq[Ref], S2: Set[Ref], x: Ref)
  requires S1 == Seq(x) && S2 == Set(x)
  requires forall y: Ref :: y in S1 ==> y != null
  // // UnexpectedOutput(postcondition.violated:assertion.false, /silicon/issue/150/)
  // // UnexpectedOutput(postcondition.violated:assertion.false, /carbon/issue/117/)
  ensures  forall y: Ref :: y in S2 ==> y != null
{}

method repro(s:Seq[Ref])
  requires forall i: Int, j: Int :: 0 <= i && i < j && j < |s| ==> s[i] != s[j]
{
  inhale (forall x: Int :: x in [0..|s|) ==> acc(s[x].f))
  inhale (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
  assert (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
}

method test01(s:Seq[Ref])
{
  inhale forall x: Ref :: x in s ==> acc(x.f)
  assert forall x: Ref :: x in s ==> x != null
  // // UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/64/)
  // // UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/117/) // fixed with diff 8
  assert forall i: Int :: 0 <= i && i < |s| ==> s[i] != null
}

method reprotwo(s:Seq[Ref])
{
  inhale (forall x: Ref :: x in s ==> acc(x.f))
  inhale (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
  assert (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
}

method reprothree(s:Seq[Ref])
{
  inhale (forall x: Ref :: x in s ==> acc(x.f))
  inhale (forall x: Ref :: x in s ==> (x.f == 0))
  // currently works! //:: UnexpectedOutput(assert.failed:receiver.null, /silicon/issue/64/)
  // // UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/198/) // diff 8a fixes this
  assert (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
    // Fails in Silicon when using Z3 4.5.0 (and earlier)
    // Works in Silicon when using Z3 4.5.1 (https://github.com/Z3Prover/z3/issues/935)
} 

method reprofour(s:Seq[Ref])
{
  inhale (forall x: Ref :: x in s ==> acc(x.f))
  inhale (forall x: Ref :: x in s ==> (x.f == 0))
  assert (forall x: Ref :: x in s ==> (x.f == 0))
  // // :: UnexpectedOutput(assert.failed:receiver.null, /silicon/issue/64/)
  assert |s|>0 ==> s[0].f == 0
    // Fails in Silicon when using Z3 4.5.0 (and earlier)
    // Works in Silicon when using Z3 4.5.1 (https://github.com/Z3Prover/z3/issues/935)
}
