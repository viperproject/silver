//  for the moment sep scopes but have acc to outside

adt List[T] {
    Nil()
    Cons(value: T, tail: List[T])
}

field list:List[Int]
field condtion:Bool

method adt_as_fields_1()
{
    var f: Ref
    f := new (list, condtion)
    assert f.list.isNil || f.list.isCons


    f.list := Cons(42, Nil())
    assert !f.list.tail.isCons

    f.list := Cons(42, Nil()).tail
    f.condtion := Cons(42, Nil()).isCons

    assert f.list == Nil()
    assert f.condtion == true

}

method f2(l : Ref)
    requires l != null
   {
   var curr : Ref
   curr := l




   while(curr != null)
   {

        var i : Int
        curr := null

        ghost{
                var i : Int
                i := 1
           }
   }
}